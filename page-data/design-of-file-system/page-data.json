{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/design-of-file-system/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Howdy"}},"markdownRemark":{"id":"d626419d-da67-506f-ba87-8ab06c2468bd","excerpt":"功能设计 登录鉴权：进入系统必须先登录，未登录无法访问到后端接口与网盘的静态资源 上传：断点续传、文件秒传 文件分享：生成一个随机密钥字符串与一个资源访问地址，输入密钥验证成功即可访问到该资源，密钥会在一定时间内过期 回收站：删除后的文件默认先保留在回收站，…","html":"<h2 id=\"功能设计\" style=\"position:relative;\"><a href=\"#%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1\" aria-label=\"功能设计 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>功能设计</h2>\n<ol>\n<li>登录鉴权：进入系统必须先登录，未登录无法访问到后端接口与网盘的静态资源</li>\n<li>上传：断点续传、文件秒传</li>\n<li>文件分享：生成一个随机密钥字符串与一个资源访问地址，输入密钥验证成功即可访问到该资源，密钥会在一定时间内过期</li>\n<li>回收站：删除后的文件默认先保留在回收站，7天后自动删除</li>\n<li>文件操作: 新建文件夹、重命名、移动、删除、批量删除</li>\n</ol>\n<h2 id=\"技术选型\" style=\"position:relative;\"><a href=\"#%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B\" aria-label=\"技术选型 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>技术选型</h2>\n<ul>\n<li>前端：使用Vue构建，使用ElementUI构建UI，使用vue-simple-uploader插件实现上传的断点续传、文件秒传功能。</li>\n<li>后端：使用Koa实现，直接使用Koa搭建静态资源服务器（即个人网盘资源目录），加入静态资源鉴权，使用原生Nodejs处理文件管理与上传功能。</li>\n</ul>\n<h2 id=\"问题与思考\" style=\"position:relative;\"><a href=\"#%E9%97%AE%E9%A2%98%E4%B8%8E%E6%80%9D%E8%80%83\" aria-label=\"问题与思考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>问题与思考</h2>\n<h3 id=\"q是否需要使用数据库将文件信息保存到数据库中\" style=\"position:relative;\"><a href=\"#q%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B0%86%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF%E4%BF%9D%E5%AD%98%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD\" aria-label=\"q是否需要使用数据库将文件信息保存到数据库中 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q：是否需要使用数据库，将文件信息保存到数据库中？</h3>\n<p>原则上，文件的增删查改都将使用原生nodejs进行操作，这些都不需要使用到数据库。但是原生nodejs并不能直接读取到文件的MD5值，在断点续传与秒传功能中就无法通过传来的MD5标识跟本地的文件进行匹配。所以还是需要建立一个含文件MD5、文件路径等信息的数据表记录本地文件的MD5。</p>\n<h3 id=\"q若使用了数据库记录文件md5信息怎么保证数据表的数据与本地物理存储是同步的\" style=\"position:relative;\"><a href=\"#q%E8%8B%A5%E4%BD%BF%E7%94%A8%E4%BA%86%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%B0%E5%BD%95%E6%96%87%E4%BB%B6md5%E4%BF%A1%E6%81%AF%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%9C%AC%E5%9C%B0%E7%89%A9%E7%90%86%E5%AD%98%E5%82%A8%E6%98%AF%E5%90%8C%E6%AD%A5%E7%9A%84\" aria-label=\"q若使用了数据库记录文件md5信息怎么保证数据表的数据与本地物理存储是同步的 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q：若使用了数据库记录文件MD5信息，怎么保证数据表的数据与本地物理存储是同步的？</h3>\n<p>如果进行文件操作并不是通过该文件管理系统，而是直接在windows上进入到网盘目录进行文件增删改，这时我们的应用是无法监听到文件的变更的，数据表数据并不会更新。这样就会出现我把某个文件删除了，但是数据表仍然记录了该文件是已经上传的情况。</p>\n<p>原本是想采用使用定时器定时对本地文件与数据表进行数据同步，但是发现这样在后期文件多或嵌套深的情况下性能会很差，这种方式并不合适。</p>\n<p>由于这些信息只是在文件断点续传与秒传功能中需要用到，后面采用的方案为：直接在预探请求中先判断数据库信息是否与本地物理存储相符，如果不相符则认为本地已不存在，需要重新上传。（原则上是不推荐直接使用windows进入目录进行文件操作，而是都通过这个文件管理系统进行文件操作）</p>\n<h3 id=\"q-同一个文件但存在于网盘不同目录下同时在不同目录删除该文件回收站中是否会冲突\" style=\"position:relative;\"><a href=\"#q-%E5%90%8C%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%BD%86%E5%AD%98%E5%9C%A8%E4%BA%8E%E7%BD%91%E7%9B%98%E4%B8%8D%E5%90%8C%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%90%8C%E6%97%B6%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%9B%AE%E5%BD%95%E5%88%A0%E9%99%A4%E8%AF%A5%E6%96%87%E4%BB%B6%E5%9B%9E%E6%94%B6%E7%AB%99%E4%B8%AD%E6%98%AF%E5%90%A6%E4%BC%9A%E5%86%B2%E7%AA%81\" aria-label=\"q 同一个文件但存在于网盘不同目录下同时在不同目录删除该文件回收站中是否会冲突 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q: 同一个文件，但存在于网盘不同目录下，同时在不同目录删除该文件，回收站中是否会冲突？</h3>\n<p>删除文件时，使用原文件名+时间(yyyy-MM-dd HH:mm:ss)进行重命名后再移动文件到回收站。同时需要往数据库记录文件删除的信息，删除前的文件路径与删除时间等，以便实现文件还原与回收站定时清理的功能。</p>\n<h3 id=\"q文件夹并无md5值删除文件夹如何确保可以还原\" style=\"position:relative;\"><a href=\"#q%E6%96%87%E4%BB%B6%E5%A4%B9%E5%B9%B6%E6%97%A0md5%E5%80%BC%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E5%A6%82%E4%BD%95%E7%A1%AE%E4%BF%9D%E5%8F%AF%E4%BB%A5%E8%BF%98%E5%8E%9F\" aria-label=\"q文件夹并无md5值删除文件夹如何确保可以还原 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q：文件夹并无MD5值，删除文件夹如何确保可以还原？</h3>\n<p>删除文件夹与删除文件属于同样的操作，也是通过文件夹名+时间重命名后移动到回收站目录。但是数据库中需要使用一个新的数据表记录文件夹的删除信息。</p>\n<h2 id=\"实现\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E7%8E%B0\" aria-label=\"实现 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现</h2>\n<h3 id=\"文件鉴权\" style=\"position:relative;\"><a href=\"#%E6%96%87%E4%BB%B6%E9%89%B4%E6%9D%83\" aria-label=\"文件鉴权 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件鉴权</h3>\n<p>登录时保留session, 然后使用一个中间件鉴权，如果没有session则不允许访问系统除登录接口外的其他任何请求，包括静态资源。使用koa-static构建静态资源服务器，并将defer属性设置为true，让它允许通过鉴权中间件。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/storage'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> ctx<span class=\"token punctuation\">.</span>url <span class=\"token operator\">!==</span> <span class=\"token string\">'/storage/login'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ctx<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>isLogin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">loginError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">static</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">'/public'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">defer</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">prefix</span><span class=\"token operator\">:</span> <span class=\"token string\">'/storage'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> access <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>access<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">parameterError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> base64Decode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Buffer<span class=\"token punctuation\">.</span>from</span><span class=\"token punctuation\">(</span>access<span class=\"token punctuation\">,</span> <span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> genAccess <span class=\"token operator\">=</span> base64Decode<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>storageRootKey <span class=\"token operator\">!==</span> genAccess<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">311</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'密码错误'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    ctx<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>isLogin <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'登入Storage'</span><span class=\"token punctuation\">)</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">310</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'登录失败'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里设置的文件系统接口为storage/*，静态资源服务器为public/storage，登录时前后端会把密码进行简单base64转码。</p>\n<p>若未登录直接访问静态资源，则回返回错误信息。</p>\n<p><strong>未登录直接访问</strong>\n<img src=\"https://s2.loli.net/2021/12/04/s7aVyTikBU3dGmt.png\" alt=\"未登录.jpg\"></p>\n<p><strong>登录后在访问</strong>\n<img src=\"https://s2.loli.net/2021/12/04/KE2a5xBTAkhNUnm.png\" alt=\"已登录.jpg\"></p>\n<h3 id=\"断点续传与文件秒传\" style=\"position:relative;\"><a href=\"#%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0%E4%B8%8E%E6%96%87%E4%BB%B6%E7%A7%92%E4%BC%A0\" aria-label=\"断点续传与文件秒传 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>断点续传与文件秒传</h3>\n<h4 id=\"文件md5计算\" style=\"position:relative;\"><a href=\"#%E6%96%87%E4%BB%B6md5%E8%AE%A1%E7%AE%97\" aria-label=\"文件md5计算 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文件md5计算</h4>\n<p>实现断点续传与文件秒传的前提是需要确定出文件的唯一标识，最好的方式是计算出文件的md5值。</p>\n<p>由于选择的vue-simple-uploader没有直接提供文件md5计算的api，因此需要手动实现。这里采用spark-md5插件计算文件的md5，在file-added事件中，直接用fileReader读取文件，根据每个切片循环算出md5。</p>\n<p>注意尽量不要直接一次读取整个文件的md5，直接读取大文件在IE浏览器中有可能会出现卡死的情况，遍历读取每个切片可以减轻浏览器计算压力。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">hanldeFileAdd</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fileList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>uploader<span class=\"token punctuation\">.</span>files\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> fileList<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> file<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      file<span class=\"token punctuation\">.</span><span class=\"token function\">removeFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      file<span class=\"token punctuation\">.</span>targetPath <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentPath\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">computeMD5</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">computeMD5</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> fileReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> blobSlice <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>slice <span class=\"token operator\">||</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>mozSlice <span class=\"token operator\">||</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>webkitSlice\n    <span class=\"token keyword\">let</span> currentChunk <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">const</span> chunkSize <span class=\"token operator\">=</span> <span class=\"token constant\">CHUNK_SIZE</span>\n    <span class=\"token keyword\">const</span> chunks <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>size <span class=\"token operator\">/</span> chunkSize<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> spark <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SparkMD5<span class=\"token punctuation\">.</span>ArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createMD5Element</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">loadNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    fileReader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      spark<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentChunk <span class=\"token operator\">&lt;</span> chunks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        currentChunk<span class=\"token operator\">++</span>\n        <span class=\"token function\">loadNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMD5ElementText</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">校验MD5 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currentChunk <span class=\"token operator\">/</span> chunks<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">%</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n          document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.uploader-list .file-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>file<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> .uploader-file-actions</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> md5 <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        file<span class=\"token punctuation\">.</span>uniqueIdentifier <span class=\"token operator\">=</span> md5\n        file<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">destoryMD5Element</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.uploader-list .file-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>file<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> .uploader-file-actions</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'block'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    fileReader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setMD5ElementText</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token string\">'校验MD5失败'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      file<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">loadNext</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> currentChunk <span class=\"token operator\">*</span> chunkSize\n      <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> chunkSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> file<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> file<span class=\"token punctuation\">.</span>size <span class=\"token operator\">:</span> start <span class=\"token operator\">+</span> chunkSize\n      fileReader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsArrayBuffer</span><span class=\"token punctuation\">(</span><span class=\"token function\">blobSlice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>file<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">createMD5Element</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.uploader-list .file-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>file<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> .uploader-file-status</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> MD5Status <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span>\n      MD5Status<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'md5-status'</span><span class=\"token punctuation\">)</span>\n      el<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>MD5Status<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">destoryMD5Element</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.uploader-list .file-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>file<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> .uploader-file-status .md5-status</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        el<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">setMD5ElementText</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">file<span class=\"token punctuation\">,</span> text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">.uploader-list .file-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>file<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> .uploader-file-status .md5-status</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      el<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> text\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>将计算完的MD5直接替换到file对象的uniqueIdentifier属性上，最终发送的请求中的identifier将是文件的MD5，后端通过该字段进行识别。</p>\n<p>Vue-simple-uploader文件列表状态需要加入计算MD5相关状态，可以通过css为原文件列表增加多一层md5状态层，然后通过相关事件进行显隐。</p>\n<p><img src=\"https://s2.loli.net/2021/12/04/xF1pgQ9WGhZ7X6i.png\" alt=\"md5-status.jpg\"></p>\n<h4 id=\"断点续传\" style=\"position:relative;\"><a href=\"#%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0\" aria-label=\"断点续传 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>断点续传</h4>\n<p>默认Vue-simple-uploader提供了文件上传时的暂停/开始操作，你可以在上传过程中随时暂停。但是这个并不是真正的断点续传，因为页面刷新后，上传状态并没有保存下来，仍会重新从第一片重新上传。若将状态保留到localstorage中，仍是不太现实的，最好的方式是由后端返回是否需要当前这个切片，因为后端能知道当前该文件已上传的切片。</p>\n<p>testChunks属性设为true（默认）时，每个切片会先发送一个不含文件流的预探get请求给后端，通过后端返回的http状态码（可更改）判断该切片是否需要发送。</p>\n<p>默认每个切片都会发送一个预探请求，这样假如一个10个切片的文件就会产生20个请求，造成浪费。最理想的情况是预探请求只发送一个。新版simple-uplder也考虑到这点，并提供了checkChunkUploadedByResponse属性，可以将预探请求设置为一个，后端为这个预探请求直接返回当前已经有的切片数组，然后前端直接判断切片请求是否需要发送。</p>\n<p>例：文件上传到一半，点了暂停，然后刷新网页，再重新上传。文件校验完Md5后，预探请求返回已存在的切片数组[1~25]，然后真正切片请求会直接从第26片开始上传。</p>\n<p><img src=\"https://s2.loli.net/2021/12/04/asoDtjuVrNLdFyX.png\" alt=\"续传.jpg\"></p>\n<p><strong>前端处理</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 前端vue-simple-uploader配置项</span>\n<span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">target</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">instance<span class=\"token punctuation\">,</span> chunk<span class=\"token punctuation\">,</span> isTest</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> isTest <span class=\"token operator\">?</span> <span class=\"token string\">'/api/storage/testUpload'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'/api/storage/upload'</span><span class=\"token punctuation\">,</span></span>  <span class=\"token function-variable function\">query</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">targetPath</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentPath\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">chunkSize</span><span class=\"token operator\">:</span> <span class=\"token constant\">CHUNK_SIZE</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">allowDuplicateUploads</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">checkChunkUploadedByResponse</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk<span class=\"token punctuation\">,</span> message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> existChunk <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token operator\">~</span><span class=\"token operator\">~</span>item<span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> existChunk<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span>offset <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其中/storage/testUpload为预探请求（get），storage/upload为真正切片上传请求（post）。checkChunkUploadedByResponse控制只上传后端不存在的切片。</p>\n<p><strong>后端处理</strong></p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/testUpload'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> identifier<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">,</span> targetPath <span class=\"token operator\">=</span> <span class=\"token string\">'$Root'</span><span class=\"token punctuation\">,</span> totalChunks <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>query\n  <span class=\"token keyword\">const</span> chunkFolderURL <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>storageChunkPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>identifier<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> checkExistResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">select * from storage where id = ? and isComplete = 1 and isDel = 0</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> identifier<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 检查是否已经完整上传过该文件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>checkExistResult<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> fullPath <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> checkExistResult<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">let</span> realPath <span class=\"token operator\">=</span> fullPath<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$Root'</span><span class=\"token punctuation\">,</span> storageRootPath<span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 检查当前DB信息是否与物理存储相符</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>realPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 检查目标位置是否与之前上传的位置一样，不一致则复制过去</span>\n        <span class=\"token keyword\">let</span> targetFilePath <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>targetPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fullPath <span class=\"token operator\">!==</span> targetFilePath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          targetFilePath <span class=\"token operator\">=</span> targetFilePath<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$Root'</span><span class=\"token punctuation\">,</span> storageRootPath<span class=\"token punctuation\">)</span>\n          fs<span class=\"token punctuation\">.</span><span class=\"token function\">copyFileSync</span><span class=\"token punctuation\">(</span>realPath<span class=\"token punctuation\">,</span> targetFilePath<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 返回全部分片数组</span>\n<span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">const</span> chunksArr <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> totalChunks <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></span>        ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">successData</span><span class=\"token punctuation\">(</span>chunksArr<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>chunkFolderURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirSync</span><span class=\"token punctuation\">(</span>chunkFolderURL<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token function\">DateFormat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yyyy-MM-dd HH:mm:ss'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> sql <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">replace into storage(id, fullPath, updatedTime, isComplete, isDel) values(?, ?, ?, 0, 0)</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>identifier<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>targetPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">successData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> ls <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span>chunkFolderURL<span class=\"token punctuation\">)</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">successData</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">501</span>\n    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">306</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/upload'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">ctx</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> chunkNumber<span class=\"token punctuation\">,</span> identifier<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">,</span> totalChunks<span class=\"token punctuation\">,</span> targetPath <span class=\"token operator\">=</span> <span class=\"token string\">'$Root'</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>body\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> file <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>files\n  <span class=\"token keyword\">const</span> chunkFolderURL <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./public/storage-chunk/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>identifier<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">const</span> chunkFileURL <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>chunkFolderURL<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>chunkNumber<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chunkNumber <span class=\"token operator\">!==</span> totalChunks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> reader <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> upStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span>chunkFileURL<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    reader<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>upStream<span class=\"token punctuation\">)</span></span>    ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> targetFile <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>targetPath<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$Root'</span><span class=\"token punctuation\">,</span> storageRootPath<span class=\"token punctuation\">)</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>targetFile<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> totalChunks<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> i <span class=\"token operator\">==</span> totalChunks <span class=\"token operator\">?</span> file<span class=\"token punctuation\">.</span>path <span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>chunkFolderURL<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token keyword\">const</span> buffer <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFileSync</span><span class=\"token punctuation\">(</span>targetFile<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token function\">DateFormat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yyyy-MM-dd HH:mm:ss'</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> sql <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">update storage set isComplete = 1, updatedTime = ? where id = ?</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token keyword\">await</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">,</span> identifier<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">deleteFolder</span><span class=\"token punctuation\">(</span>chunkFolderURL<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件上传成功'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">targetFile: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>targetFile<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, MD5:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>identifier<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, 切片源删除成功</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ctx<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">501</span>\n      ctx<span class=\"token punctuation\">.</span>body <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token number\">501</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">logger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'文件合并失败'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">分片丢失 => </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">      fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlinkSync</span><span class=\"token punctuation\">(</span>targetFile<span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在testUpload请求中，通过数据库与本地切片生成已存在的切片数组给前端，若从未传过还需要更新数据库记录。</p>\n<p>在upload请求中，对每个切片使用nodejs管道流进行读写，将文件保留在chunk文件夹中，并以md5值为文件名，存放目标文件的切片。当遇到最后一个切片时，执行合并文件操作（需要注意，最后一个切片由于流未关闭，这个时刻最后一个切片文件是还没保存到本地，只是可以直接读取临时文件）。合并文件完成后，删除切片文件夹，并更新数据库信息，记录该文件已经完成。</p>\n<p><img src=\"https://s2.loli.net/2021/12/04/lLGko4FJcxUs1n8.png\" alt=\"切片存放.jpg\"></p>\n<p>当上传一个本地已经存在的文件时，由于数据库记录了该md5文件是已经完成的，所以预探请求会返回全部切片数组，前端就不会再发送upload请求从而实现了文件秒传。即使上传的目标目录与本地已存在文件处在不同目录，在预探请求时识别到时，也会进行复制操作，前端也不需要再传。</p>\n<p><strong>断点续传演示</strong>\n<img src=\"https://s2.loli.net/2021/12/04/tXQRgNm752BCyY9.gif\" alt=\"断点续传.gif\"></p>\n<p>上传过程暂停，然后刷新页面，重新上传同一个文件，可以发现文件是从上传暂停的地方重新开始。</p>\n<p><strong>文件秒传演示</strong>\n<img src=\"https://i.imgur.com/8lX6kJ4.gif\" alt=\"文件秒传.gif\"></p>\n<p>上传上面演示的同一个文件，由于发现是已经存在的文件，则会直接返回成功。</p>\n<p>至此，一个断点续传、秒传功能的前后端都实现完了。</p>\n<p>另外该系统还有一些对文件进行移动、删除、下载的功能都是比较简单的，基本都是使用nodejs的fs模块就能实现，这里就不细说了。</p>\n<p>该系统前端Git: <a href=\"https://github.com/leon-kfd/FileSystem\" target=\"_blank\"><a href=\"https://github.com/leon-kfd/FileSystem\">https://github.com/leon-kfd/FileSystem</a></a></p>\n<p>由于目前该后端是嵌入到了本人的其他系统里面，还未能开源，等有空会整理出一份。同时系统部分功能由于时间问题也还没有空去完善，望见谅。</p>","frontmatter":{"title":"断点续传与个人网盘系统的前后端设计","date":"May 05, 2020","description":"如何实现一个带有断点续传、秒传，文件访问鉴权功能的个人网盘系统"}}},"pageContext":{"slug":"/design-of-file-system/","previous":{"fields":{"slug":"/build-component-cabinet/"},"frontmatter":{"title":"个人组件库展示站点搭建总结"}},"next":{"fields":{"slug":"/vite-pratice-todolist/"},"frontmatter":{"title":"Vue3上手: 使用vite实现一个简单的todolist应用"}}}},
    "staticQueryHashes": ["143701507","165057280"]}